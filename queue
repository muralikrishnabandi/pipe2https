package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"
)

type payload struct {
	body string
	t    time.Time
}
type buffer chan *payload

var buf buffer

func init() {
	buf = make(buffer, *backlog)
	go func() {
		for {
			err := buf.publish()
			if err != nil {
				log.Println(err)
			}
			time.Sleep(*backoff)
		}
	}()
}

func newPayload(body string) *payload {
	return &payload{
		body: body,
		t:    time.Now(),
	}
}

func (c buffer) publish() error {
	for r := range c {
		if r == nil {
			break
		}

		req, err := http.NewRequest("POST", absoluteURL.String(), strings.NewReader(r.body))
		if err != nil {
			return err
		}
		req.Header.Set("Time", fmt.Sprint(r.t.Unix()))

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			return err
		}
		resp.Body.Close()
	}
	return nil
}

func enq(p *payload) {
	buf <- p
}

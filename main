package main

import (
	"bufio"
	"flag"
	"log"
	"net/url"
	"os"
	"time"
)

var (
	backlog = flag.Uint("backlog", 8192, "incoming channel capacity")
	backoff = flag.Duration("backoff", time.Second, "pause between errors")

	baseURL        = flag.String("url", "https://zpev.cogolo.net/", "base URL")
	pathBounces    = flag.Bool("bounces", false, "event type: bounces")
	pathDeliveries = flag.Bool("deliveries", false, "event type: deliveries")
	pathFbls       = flag.Bool("fbls", false, "event type: fbls")
	pathOther      = flag.Bool("other", false, "event type: other")
	pathReceptions = flag.Bool("receptions", false, "event type: receptions")
	pathRemote     = flag.Bool("remote", false, "event type: remote")
	pathTransfails = flag.Bool("transfails", false, "event type: transfails")
	pathTransqueue = flag.Bool("transqueue", false, "event type: transqueue")

	absoluteURL *url.URL
)

func init() {
	flag.Parse()
	u, err := url.Parse(*baseURL)
	if err != nil {
		log.Fatal(err)
	}
	switch {
	case *pathBounces:
		absoluteURL, _ = u.Parse("/bounce")
	case *pathDeliveries:
		absoluteURL, _ = u.Parse("/delivery")
	case *pathFbls:
		absoluteURL, _ = u.Parse("/fbl")
	case *pathOther:
		absoluteURL, _ = u.Parse("/other")
	case *pathReceptions:
		absoluteURL, _ = u.Parse("/reception")
	case *pathRemote:
		absoluteURL, _ = u.Parse("/remote")
	case *pathTransfails:
		absoluteURL, _ = u.Parse("/transfail")
	case *pathTransqueue:
		absoluteURL, _ = u.Parse("/transqueue")
	default:
		log.Fatal("Must specify event type eg. -bounces, -fbls, etc. See -help.")
	}
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		enq(newPayload(scanner.Text()))
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}
